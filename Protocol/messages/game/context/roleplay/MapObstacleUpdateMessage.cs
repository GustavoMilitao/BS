//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BlueSheep.Protocol.Messages.Game.Context.Roleplay
{
    using BlueSheep.Protocol.Types.Game.Interactive;
    using System.Collections.Generic;
    using BlueSheep.Protocol;


    public class MapObstacleUpdateMessage : Message
    {
        
        public const int ProtocolId = 6051;
        
        public override int MessageID
        {
            get
            {
                return ProtocolId;
            }
        }
        
        private List<MapObstacle> m_obstacles;
        
        public virtual List<MapObstacle> Obstacles
        {
            get
            {
                return m_obstacles;
            }
            set
            {
                m_obstacles = value;
            }
        }
        
        public MapObstacleUpdateMessage(List<MapObstacle> obstacles)
        {
            m_obstacles = obstacles;
        }
        
        public MapObstacleUpdateMessage()
        {
        }
        
        public override void Serialize(IDataWriter writer)
        {
            writer.WriteShort(((short)(m_obstacles.Count)));
            int obstaclesIndex;
            for (obstaclesIndex = 0; (obstaclesIndex < m_obstacles.Count); obstaclesIndex = (obstaclesIndex + 1))
            {
                MapObstacle objectToSend = m_obstacles[obstaclesIndex];
                objectToSend.Serialize(writer);
            }
        }
        
        public override void Deserialize(IDataReader reader)
        {
            int obstaclesCount = reader.ReadUShort();
            int obstaclesIndex;
            m_obstacles = new System.Collections.Generic.List<MapObstacle>();
            for (obstaclesIndex = 0; (obstaclesIndex < obstaclesCount); obstaclesIndex = (obstaclesIndex + 1))
            {
                MapObstacle objectToAdd = new MapObstacle();
                objectToAdd.Deserialize(reader);
                m_obstacles.Add(objectToAdd);
            }
        }
    }
}
