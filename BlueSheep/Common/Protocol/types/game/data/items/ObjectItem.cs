//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BlueSheep.Common.Protocol.Types.Game.Data.Items
{
    using BlueSheep.Common.Protocol.Types.Game.Data.Items.Effects;
    using BlueSheep.Common.Protocol;
    using System.Collections.Generic;
    using BlueSheep.Common.Protocol.Messages;
    using BlueSheep.Common.Protocol.Types;
    
    
    using BlueSheep.Protocol;
    using System;
    using System.Linq;

    public class ObjectItem : Item
    {
        
        public new const int ID = 37;
        
        public virtual int TypeID
        {
            get
            {
                return ID;
            }
        }
        
        private List<ObjectEffect> m_effects;
        
        public virtual List<ObjectEffect> Effects
        {
            get
            {
                return m_effects;
            }
            set
            {
                m_effects = value;
            }
        }
        
        private byte m_position;
        
        public virtual byte Position
        {
            get
            {
                return m_position;
            }
            set
            {
                m_position = value;
            }
        }
        
        private ushort m_objectGID;
        
        public virtual ushort ObjectGID
        {
            get
            {
                return m_objectGID;
            }
            set
            {
                m_objectGID = value;
            }
        }
        
        private uint m_objectUID;
        
        public virtual uint ObjectUID
        {
            get
            {
                return m_objectUID;
            }
            set
            {
                m_objectUID = value;
            }
        }
        
        private uint m_quantity;
        
        public virtual uint Quantity
        {
            get
            {
                return m_quantity;
            }
            set
            {
                m_quantity = value;
            }
        }
        
        public ObjectItem(List<ObjectEffect> effects, byte position, ushort objectGID, uint objectUID, uint quantity)
        {
            m_effects = effects;
            m_position = position;
            m_objectGID = objectGID;
            m_objectUID = objectUID;
            m_quantity = quantity;
        }
        
        public ObjectItem()
        {
        }

        public virtual void Serialize(IDataWriter writer)
        {

            base.Serialize(writer);
            writer.WriteByte(Position);
            writer.WriteVarShort((short)ObjectGID);
            writer.WriteUShort((ushort)Effects.Count);
            foreach (var entry in Effects)
            {
                writer.WriteShort((short)entry.TypeID);
                entry.Serialize(writer);
            }
            writer.WriteVarInt(ObjectUID);
            writer.WriteVarInt(Quantity);


        }

        public virtual void Deserialize(IDataReader reader)
        {

            base.Deserialize(reader);
            Position = reader.ReadByte();
            if (Position < 0 || Position > 255)
                throw new Exception("Forbidden value on position = " + Position + ", it doesn't respect the following condition : position < 0 || position > 255");
            ObjectGID = reader.ReadVarUhShort();
            if (ObjectGID < 0)
                throw new Exception("Forbidden value on objectGID = " + ObjectGID + ", it doesn't respect the following condition : objectGID < 0");
            var limit = reader.ReadUShort();
            Effects = new ObjectEffect[limit].ToList();
            for (int i = 0; i < limit; i++)
            {
                Effects[i] = Types.ProtocolTypeManager.GetInstance<ObjectEffect>(reader.ReadUShort());
                Effects[i].Deserialize(reader);
            }
            ObjectUID = (uint)reader.ReadVarInt();
            if (ObjectUID < 0)
                throw new Exception("Forbidden value on objectUID = " + ObjectUID + ", it doesn't respect the following condition : objectUID < 0");
            Quantity = (uint)reader.ReadVarInt();
            if (Quantity < 0)
                throw new Exception("Forbidden value on quantity = " + Quantity + ", it doesn't respect the following condition : quantity < 0");


        }
    }
}
