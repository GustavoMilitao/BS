//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BlueSheep.Common.Protocol.Types.Game.Context.Roleplay.Job
{
    using BlueSheep.Common.Protocol.Types.Game.Interactive.Skill;
    using BlueSheep.Common.Protocol;
    using System.Collections.Generic;
    using BlueSheep.Common.Protocol.Messages;
    using BlueSheep.Common.Protocol.Types;
    using BlueSheep.Protocol;
    
    
    public class JobDescription 
    {
        
        public new const int ID = 101;
        
        public virtual int TypeID
        {
            get
            {
                return ID;
            }
        }
        
        private List<SkillActionDescription> m_skills;
        
        public virtual List<SkillActionDescription> Skills
        {
            get
            {
                return m_skills;
            }
            set
            {
                m_skills = value;
            }
        }
        
        private byte m_jobId;
        
        public virtual byte JobId
        {
            get
            {
                return m_jobId;
            }
            set
            {
                m_jobId = value;
            }
        }
        
        public JobDescription(List<SkillActionDescription> skills, byte jobId)
        {
            m_skills = skills;
            m_jobId = jobId;
        }
        
        public JobDescription()
        {
        }
        
        public void Serialize(IDataWriter writer)
        {
            writer.WriteShort(((short)(m_skills.Count)));
            int skillsIndex;
            for (skillsIndex = 0; (skillsIndex < m_skills.Count); skillsIndex = (skillsIndex + 1))
            {
                SkillActionDescription objectToSend = m_skills[skillsIndex];
                writer.WriteUShort(((ushort)(objectToSend.TypeID)));
                objectToSend.Serialize(writer);
            }
            writer.WriteByte(m_jobId);
        }
        
        public void Deserialize(IDataReader reader)
        {
            int skillsCount = reader.ReadUShort();
            int skillsIndex;
            m_skills = new System.Collections.Generic.List<SkillActionDescription>();
            for (skillsIndex = 0; (skillsIndex < skillsCount); skillsIndex = (skillsIndex + 1))
            {
                SkillActionDescription objectToAdd = ProtocolTypeManager.GetInstance<SkillActionDescription>(reader.ReadUShort());
                objectToAdd.Deserialize(reader);
                m_skills.Add(objectToAdd);
            }
            m_jobId = reader.ReadByte();
        }
    }
}
