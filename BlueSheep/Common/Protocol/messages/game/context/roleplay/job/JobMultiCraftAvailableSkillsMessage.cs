//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BlueSheep.Common.Protocol.Messages.Game.Context.Roleplay.Job
{
    using System.Collections.Generic;
    using BlueSheep.Common.Protocol.Messages;
    using BlueSheep.Common.Protocol.Types;
    
    
    using BlueSheep.Protocol;
    
    
    using BlueSheep.Engine.Types;

 	 public class JobMultiCraftAvailableSkillsMessage : JobAllowMultiCraftRequestMessage 
    {
        
        public new const int ID = 5747;
        
        public override int MessageID
        {
            get
            {
                return ID;
            }
        }
        
        private List<System.UInt16> m_skills;
        
        public virtual List<System.UInt16> Skills
        {
            get
            {
                return m_skills;
            }
            set
            {
                m_skills = value;
            }
        }
        
        private ulong m_playerId;
        
        public virtual ulong PlayerId
        {
            get
            {
                return m_playerId;
            }
            set
            {
                m_playerId = value;
            }
        }
        
        public JobMultiCraftAvailableSkillsMessage(List<System.UInt16> skills, ulong playerId)
        {
            m_skills = skills;
            m_playerId = playerId;
        }
        
        public JobMultiCraftAvailableSkillsMessage()
        {
        }
        
        public override void Serialize(IDataWriter writer)
        {
            base.Serialize(writer);
            writer.WriteShort(((short)(m_skills.Count)));
            int skillsIndex;
            for (skillsIndex = 0; (skillsIndex < m_skills.Count); skillsIndex = (skillsIndex + 1))
            {
                writer.WriteVarShort(m_skills[skillsIndex]);
            }
            writer.WriteVarLong(m_playerId);
        }
        
        public override void Deserialize(IDataReader reader)
        {
            base.Deserialize(reader);
            int skillsCount = reader.ReadUShort();
            int skillsIndex;
            m_skills = new System.Collections.Generic.List<ushort>();
            for (skillsIndex = 0; (skillsIndex < skillsCount); skillsIndex = (skillsIndex + 1))
            {
                m_skills.Add(reader.ReadVarUhShort());
            }
            m_playerId = reader.ReadVarUhLong();
        }
    }
}
